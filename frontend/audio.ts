// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: audio.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";

export const protobufPackage = "audio";

export interface GetAudioQueueRequest {
}

export interface GetAudioQueueResponse {
  recordingIds: string[];
}

export interface PingRequest {
  pingRequest: string;
}

export interface PingResponse {
  pingResponse: string;
}

/** Request for getting segments */
export interface GetAudioSegmentsRequest {
  recordingId: string;
}

/** Response containing segments */
export interface GetAudioSegmentsResponse {
  segments: AudioSegment[];
}

/**
 * Single audio segment
 * Changed to double for start_time and end_time
 */
export interface AudioSegment {
  recordingId: string;
  startTime: number;
  endTime: number;
  transcript: string;
  /** Added label field */
  label: string;
}

/** Request for streaming audio */
export interface AudioRequest {
  recordingId: string;
}

/** Response containing audio chunks */
export interface AudioResponse {
  chunk: Uint8Array;
}

/** Request to update segment labels */
export interface UpdateSegmentLabelsRequest {
  recordingId: string;
  /** Send segments with updated labels */
  segments: AudioSegment[];
}

/** Response for updating segment labels (currently empty) */
export interface UpdateSegmentLabelsResponse {
  success: boolean;
  message: string;
}

function createBaseGetAudioQueueRequest(): GetAudioQueueRequest {
  return {};
}

export const GetAudioQueueRequest: MessageFns<GetAudioQueueRequest> = {
  encode(_: GetAudioQueueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAudioQueueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAudioQueueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAudioQueueRequest {
    return {};
  },

  toJSON(_: GetAudioQueueRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAudioQueueRequest>, I>>(base?: I): GetAudioQueueRequest {
    return GetAudioQueueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAudioQueueRequest>, I>>(_: I): GetAudioQueueRequest {
    const message = createBaseGetAudioQueueRequest();
    return message;
  },
};

function createBaseGetAudioQueueResponse(): GetAudioQueueResponse {
  return { recordingIds: [] };
}

export const GetAudioQueueResponse: MessageFns<GetAudioQueueResponse> = {
  encode(message: GetAudioQueueResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.recordingIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAudioQueueResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAudioQueueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordingIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAudioQueueResponse {
    return {
      recordingIds: globalThis.Array.isArray(object?.recordingIds)
        ? object.recordingIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetAudioQueueResponse): unknown {
    const obj: any = {};
    if (message.recordingIds?.length) {
      obj.recordingIds = message.recordingIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAudioQueueResponse>, I>>(base?: I): GetAudioQueueResponse {
    return GetAudioQueueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAudioQueueResponse>, I>>(object: I): GetAudioQueueResponse {
    const message = createBaseGetAudioQueueResponse();
    message.recordingIds = object.recordingIds?.map((e) => e) || [];
    return message;
  },
};

function createBasePingRequest(): PingRequest {
  return { pingRequest: "" };
}

export const PingRequest: MessageFns<PingRequest> = {
  encode(message: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pingRequest !== "") {
      writer.uint32(10).string(message.pingRequest);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pingRequest = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingRequest {
    return { pingRequest: isSet(object.pingRequest) ? globalThis.String(object.pingRequest) : "" };
  },

  toJSON(message: PingRequest): unknown {
    const obj: any = {};
    if (message.pingRequest !== "") {
      obj.pingRequest = message.pingRequest;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingRequest>, I>>(base?: I): PingRequest {
    return PingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingRequest>, I>>(object: I): PingRequest {
    const message = createBasePingRequest();
    message.pingRequest = object.pingRequest ?? "";
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { pingResponse: "" };
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pingResponse !== "") {
      writer.uint32(10).string(message.pingResponse);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pingResponse = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { pingResponse: isSet(object.pingResponse) ? globalThis.String(object.pingResponse) : "" };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.pingResponse !== "") {
      obj.pingResponse = message.pingResponse;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingResponse>, I>>(base?: I): PingResponse {
    return PingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingResponse>, I>>(object: I): PingResponse {
    const message = createBasePingResponse();
    message.pingResponse = object.pingResponse ?? "";
    return message;
  },
};

function createBaseGetAudioSegmentsRequest(): GetAudioSegmentsRequest {
  return { recordingId: "" };
}

export const GetAudioSegmentsRequest: MessageFns<GetAudioSegmentsRequest> = {
  encode(message: GetAudioSegmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordingId !== "") {
      writer.uint32(10).string(message.recordingId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAudioSegmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAudioSegmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordingId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAudioSegmentsRequest {
    return { recordingId: isSet(object.recordingId) ? globalThis.String(object.recordingId) : "" };
  },

  toJSON(message: GetAudioSegmentsRequest): unknown {
    const obj: any = {};
    if (message.recordingId !== "") {
      obj.recordingId = message.recordingId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAudioSegmentsRequest>, I>>(base?: I): GetAudioSegmentsRequest {
    return GetAudioSegmentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAudioSegmentsRequest>, I>>(object: I): GetAudioSegmentsRequest {
    const message = createBaseGetAudioSegmentsRequest();
    message.recordingId = object.recordingId ?? "";
    return message;
  },
};

function createBaseGetAudioSegmentsResponse(): GetAudioSegmentsResponse {
  return { segments: [] };
}

export const GetAudioSegmentsResponse: MessageFns<GetAudioSegmentsResponse> = {
  encode(message: GetAudioSegmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.segments) {
      AudioSegment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAudioSegmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAudioSegmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.segments.push(AudioSegment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAudioSegmentsResponse {
    return {
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => AudioSegment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAudioSegmentsResponse): unknown {
    const obj: any = {};
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => AudioSegment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAudioSegmentsResponse>, I>>(base?: I): GetAudioSegmentsResponse {
    return GetAudioSegmentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAudioSegmentsResponse>, I>>(object: I): GetAudioSegmentsResponse {
    const message = createBaseGetAudioSegmentsResponse();
    message.segments = object.segments?.map((e) => AudioSegment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAudioSegment(): AudioSegment {
  return { recordingId: "", startTime: 0, endTime: 0, transcript: "", label: "" };
}

export const AudioSegment: MessageFns<AudioSegment> = {
  encode(message: AudioSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordingId !== "") {
      writer.uint32(10).string(message.recordingId);
    }
    if (message.startTime !== 0) {
      writer.uint32(17).double(message.startTime);
    }
    if (message.endTime !== 0) {
      writer.uint32(25).double(message.endTime);
    }
    if (message.transcript !== "") {
      writer.uint32(34).string(message.transcript);
    }
    if (message.label !== "") {
      writer.uint32(42).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AudioSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudioSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordingId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.startTime = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.endTime = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.transcript = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.label = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AudioSegment {
    return {
      recordingId: isSet(object.recordingId) ? globalThis.String(object.recordingId) : "",
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
    };
  },

  toJSON(message: AudioSegment): unknown {
    const obj: any = {};
    if (message.recordingId !== "") {
      obj.recordingId = message.recordingId;
    }
    if (message.startTime !== 0) {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== 0) {
      obj.endTime = message.endTime;
    }
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AudioSegment>, I>>(base?: I): AudioSegment {
    return AudioSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AudioSegment>, I>>(object: I): AudioSegment {
    const message = createBaseAudioSegment();
    message.recordingId = object.recordingId ?? "";
    message.startTime = object.startTime ?? 0;
    message.endTime = object.endTime ?? 0;
    message.transcript = object.transcript ?? "";
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseAudioRequest(): AudioRequest {
  return { recordingId: "" };
}

export const AudioRequest: MessageFns<AudioRequest> = {
  encode(message: AudioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordingId !== "") {
      writer.uint32(10).string(message.recordingId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AudioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordingId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AudioRequest {
    return { recordingId: isSet(object.recordingId) ? globalThis.String(object.recordingId) : "" };
  },

  toJSON(message: AudioRequest): unknown {
    const obj: any = {};
    if (message.recordingId !== "") {
      obj.recordingId = message.recordingId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AudioRequest>, I>>(base?: I): AudioRequest {
    return AudioRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AudioRequest>, I>>(object: I): AudioRequest {
    const message = createBaseAudioRequest();
    message.recordingId = object.recordingId ?? "";
    return message;
  },
};

function createBaseAudioResponse(): AudioResponse {
  return { chunk: new Uint8Array(0) };
}

export const AudioResponse: MessageFns<AudioResponse> = {
  encode(message: AudioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunk.length !== 0) {
      writer.uint32(10).bytes(message.chunk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AudioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunk = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AudioResponse {
    return { chunk: isSet(object.chunk) ? bytesFromBase64(object.chunk) : new Uint8Array(0) };
  },

  toJSON(message: AudioResponse): unknown {
    const obj: any = {};
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes(message.chunk);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AudioResponse>, I>>(base?: I): AudioResponse {
    return AudioResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AudioResponse>, I>>(object: I): AudioResponse {
    const message = createBaseAudioResponse();
    message.chunk = object.chunk ?? new Uint8Array(0);
    return message;
  },
};

function createBaseUpdateSegmentLabelsRequest(): UpdateSegmentLabelsRequest {
  return { recordingId: "", segments: [] };
}

export const UpdateSegmentLabelsRequest: MessageFns<UpdateSegmentLabelsRequest> = {
  encode(message: UpdateSegmentLabelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordingId !== "") {
      writer.uint32(10).string(message.recordingId);
    }
    for (const v of message.segments) {
      AudioSegment.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSegmentLabelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSegmentLabelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordingId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.segments.push(AudioSegment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSegmentLabelsRequest {
    return {
      recordingId: isSet(object.recordingId) ? globalThis.String(object.recordingId) : "",
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => AudioSegment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateSegmentLabelsRequest): unknown {
    const obj: any = {};
    if (message.recordingId !== "") {
      obj.recordingId = message.recordingId;
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => AudioSegment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSegmentLabelsRequest>, I>>(base?: I): UpdateSegmentLabelsRequest {
    return UpdateSegmentLabelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSegmentLabelsRequest>, I>>(object: I): UpdateSegmentLabelsRequest {
    const message = createBaseUpdateSegmentLabelsRequest();
    message.recordingId = object.recordingId ?? "";
    message.segments = object.segments?.map((e) => AudioSegment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateSegmentLabelsResponse(): UpdateSegmentLabelsResponse {
  return { success: false, message: "" };
}

export const UpdateSegmentLabelsResponse: MessageFns<UpdateSegmentLabelsResponse> = {
  encode(message: UpdateSegmentLabelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSegmentLabelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSegmentLabelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSegmentLabelsResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: UpdateSegmentLabelsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSegmentLabelsResponse>, I>>(base?: I): UpdateSegmentLabelsResponse {
    return UpdateSegmentLabelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSegmentLabelsResponse>, I>>(object: I): UpdateSegmentLabelsResponse {
    const message = createBaseUpdateSegmentLabelsResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

/** Service definition */
export interface AudioService {
  /** Get audio segments for a specific recording */
  GetAudioSegments(request: GetAudioSegmentsRequest): Promise<GetAudioSegmentsResponse>;
  /** Stream audio file data */
  StreamAudio(request: AudioRequest): Observable<AudioResponse>;
  /** Update segment labels */
  UpdateSegmentLabels(request: UpdateSegmentLabelsRequest): Promise<UpdateSegmentLabelsResponse>;
  /** Ping server */
  Ping(request: PingRequest): Promise<PingResponse>;
  GetAudioQueue(request: GetAudioQueueRequest): Promise<GetAudioQueueResponse>;
}

export const AudioServiceServiceName = "audio.AudioService";
export class AudioServiceClientImpl implements AudioService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AudioServiceServiceName;
    this.rpc = rpc;
    this.GetAudioSegments = this.GetAudioSegments.bind(this);
    this.StreamAudio = this.StreamAudio.bind(this);
    this.UpdateSegmentLabels = this.UpdateSegmentLabels.bind(this);
    this.Ping = this.Ping.bind(this);
    this.GetAudioQueue = this.GetAudioQueue.bind(this);
  }
  GetAudioSegments(request: GetAudioSegmentsRequest): Promise<GetAudioSegmentsResponse> {
    const data = GetAudioSegmentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAudioSegments", data);
    return promise.then((data) => GetAudioSegmentsResponse.decode(new BinaryReader(data)));
  }

  StreamAudio(request: AudioRequest): Observable<AudioResponse> {
    const data = AudioRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamAudio", data);
    return result.pipe(map((data) => AudioResponse.decode(new BinaryReader(data))));
  }

  UpdateSegmentLabels(request: UpdateSegmentLabelsRequest): Promise<UpdateSegmentLabelsResponse> {
    const data = UpdateSegmentLabelsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSegmentLabels", data);
    return promise.then((data) => UpdateSegmentLabelsResponse.decode(new BinaryReader(data)));
  }

  Ping(request: PingRequest): Promise<PingResponse> {
    const data = PingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Ping", data);
    return promise.then((data) => PingResponse.decode(new BinaryReader(data)));
  }

  GetAudioQueue(request: GetAudioQueueRequest): Promise<GetAudioQueueResponse> {
    const data = GetAudioQueueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAudioQueue", data);
    return promise.then((data) => GetAudioQueueResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
