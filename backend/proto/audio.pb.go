// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: proto/audio.proto

package audio

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for getting segments
type GetAudioSegmentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordingId   string                 `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAudioSegmentsRequest) Reset() {
	*x = GetAudioSegmentsRequest{}
	mi := &file_proto_audio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAudioSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioSegmentsRequest) ProtoMessage() {}

func (x *GetAudioSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_audio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioSegmentsRequest.ProtoReflect.Descriptor instead.
func (*GetAudioSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_audio_proto_rawDescGZIP(), []int{0}
}

func (x *GetAudioSegmentsRequest) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

// Response containing segments
type GetAudioSegmentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Segments      []*AudioSegment        `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAudioSegmentsResponse) Reset() {
	*x = GetAudioSegmentsResponse{}
	mi := &file_proto_audio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAudioSegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioSegmentsResponse) ProtoMessage() {}

func (x *GetAudioSegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_audio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioSegmentsResponse.ProtoReflect.Descriptor instead.
func (*GetAudioSegmentsResponse) Descriptor() ([]byte, []int) {
	return file_proto_audio_proto_rawDescGZIP(), []int{1}
}

func (x *GetAudioSegmentsResponse) GetSegments() []*AudioSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Single audio segment
type AudioSegment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordingId   string                 `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	StartTime     float64                `protobuf:"fixed64,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       float64                `protobuf:"fixed64,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Transcript    string                 `protobuf:"bytes,4,opt,name=transcript,proto3" json:"transcript,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioSegment) Reset() {
	*x = AudioSegment{}
	mi := &file_proto_audio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSegment) ProtoMessage() {}

func (x *AudioSegment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_audio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSegment.ProtoReflect.Descriptor instead.
func (*AudioSegment) Descriptor() ([]byte, []int) {
	return file_proto_audio_proto_rawDescGZIP(), []int{2}
}

func (x *AudioSegment) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

func (x *AudioSegment) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AudioSegment) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *AudioSegment) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

// Request for streaming audio
type AudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordingId   string                 `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioRequest) Reset() {
	*x = AudioRequest{}
	mi := &file_proto_audio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRequest) ProtoMessage() {}

func (x *AudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_audio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRequest.ProtoReflect.Descriptor instead.
func (*AudioRequest) Descriptor() ([]byte, []int) {
	return file_proto_audio_proto_rawDescGZIP(), []int{3}
}

func (x *AudioRequest) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

// Response containing audio chunks
type AudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         []byte                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioResponse) Reset() {
	*x = AudioResponse{}
	mi := &file_proto_audio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioResponse) ProtoMessage() {}

func (x *AudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_audio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioResponse.ProtoReflect.Descriptor instead.
func (*AudioResponse) Descriptor() ([]byte, []int) {
	return file_proto_audio_proto_rawDescGZIP(), []int{4}
}

func (x *AudioResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_proto_audio_proto protoreflect.FileDescriptor

var file_proto_audio_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x22, 0x31, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0xa3, 0x01,
	0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x15, 0x5a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_proto_audio_proto_rawDescOnce sync.Once
	file_proto_audio_proto_rawDescData []byte
)

func file_proto_audio_proto_rawDescGZIP() []byte {
	file_proto_audio_proto_rawDescOnce.Do(func() {
		file_proto_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_audio_proto_rawDesc), len(file_proto_audio_proto_rawDesc)))
	})
	return file_proto_audio_proto_rawDescData
}

var file_proto_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_audio_proto_goTypes = []any{
	(*GetAudioSegmentsRequest)(nil),  // 0: audio.GetAudioSegmentsRequest
	(*GetAudioSegmentsResponse)(nil), // 1: audio.GetAudioSegmentsResponse
	(*AudioSegment)(nil),             // 2: audio.AudioSegment
	(*AudioRequest)(nil),             // 3: audio.AudioRequest
	(*AudioResponse)(nil),            // 4: audio.AudioResponse
}
var file_proto_audio_proto_depIdxs = []int32{
	2, // 0: audio.GetAudioSegmentsResponse.segments:type_name -> audio.AudioSegment
	0, // 1: audio.AudioService.GetAudioSegments:input_type -> audio.GetAudioSegmentsRequest
	3, // 2: audio.AudioService.StreamAudio:input_type -> audio.AudioRequest
	1, // 3: audio.AudioService.GetAudioSegments:output_type -> audio.GetAudioSegmentsResponse
	4, // 4: audio.AudioService.StreamAudio:output_type -> audio.AudioResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_audio_proto_init() }
func file_proto_audio_proto_init() {
	if File_proto_audio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_audio_proto_rawDesc), len(file_proto_audio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_audio_proto_goTypes,
		DependencyIndexes: file_proto_audio_proto_depIdxs,
		MessageInfos:      file_proto_audio_proto_msgTypes,
	}.Build()
	File_proto_audio_proto = out.File
	file_proto_audio_proto_goTypes = nil
	file_proto_audio_proto_depIdxs = nil
}
