// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioServiceClient is the client API for AudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioServiceClient interface {
	// Get audio segments for a specific recording
	GetAudioSegments(ctx context.Context, in *GetAudioSegmentsRequest, opts ...grpc.CallOption) (*GetAudioSegmentsResponse, error)
	// Stream audio file data
	StreamAudio(ctx context.Context, in *AudioRequest, opts ...grpc.CallOption) (AudioService_StreamAudioClient, error)
}

type audioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioServiceClient(cc grpc.ClientConnInterface) AudioServiceClient {
	return &audioServiceClient{cc}
}

func (c *audioServiceClient) GetAudioSegments(ctx context.Context, in *GetAudioSegmentsRequest, opts ...grpc.CallOption) (*GetAudioSegmentsResponse, error) {
	out := new(GetAudioSegmentsResponse)
	err := c.cc.Invoke(ctx, "/audio.AudioService/GetAudioSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audioServiceClient) StreamAudio(ctx context.Context, in *AudioRequest, opts ...grpc.CallOption) (AudioService_StreamAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioService_ServiceDesc.Streams[0], "/audio.AudioService/StreamAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceStreamAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AudioService_StreamAudioClient interface {
	Recv() (*AudioResponse, error)
	grpc.ClientStream
}

type audioServiceStreamAudioClient struct {
	grpc.ClientStream
}

func (x *audioServiceStreamAudioClient) Recv() (*AudioResponse, error) {
	m := new(AudioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioServiceServer is the server API for AudioService service.
// All implementations must embed UnimplementedAudioServiceServer
// for forward compatibility
type AudioServiceServer interface {
	// Get audio segments for a specific recording
	GetAudioSegments(context.Context, *GetAudioSegmentsRequest) (*GetAudioSegmentsResponse, error)
	// Stream audio file data
	StreamAudio(*AudioRequest, AudioService_StreamAudioServer) error
	mustEmbedUnimplementedAudioServiceServer()
}

// UnimplementedAudioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioServiceServer struct {
}

func (UnimplementedAudioServiceServer) GetAudioSegments(context.Context, *GetAudioSegmentsRequest) (*GetAudioSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioSegments not implemented")
}
func (UnimplementedAudioServiceServer) StreamAudio(*AudioRequest, AudioService_StreamAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedAudioServiceServer) mustEmbedUnimplementedAudioServiceServer() {}

// UnsafeAudioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioServiceServer will
// result in compilation errors.
type UnsafeAudioServiceServer interface {
	mustEmbedUnimplementedAudioServiceServer()
}

func RegisterAudioServiceServer(s grpc.ServiceRegistrar, srv AudioServiceServer) {
	s.RegisterService(&AudioService_ServiceDesc, srv)
}

func _AudioService_GetAudioSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServiceServer).GetAudioSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audio.AudioService/GetAudioSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServiceServer).GetAudioSegments(ctx, req.(*GetAudioSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudioService_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AudioRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioServiceServer).StreamAudio(m, &audioServiceStreamAudioServer{stream})
}

type AudioService_StreamAudioServer interface {
	Send(*AudioResponse) error
	grpc.ServerStream
}

type audioServiceStreamAudioServer struct {
	grpc.ServerStream
}

func (x *audioServiceStreamAudioServer) Send(m *AudioResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AudioService_ServiceDesc is the grpc.ServiceDesc for AudioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "audio.AudioService",
	HandlerType: (*AudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAudioSegments",
			Handler:    _AudioService_GetAudioSegments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _AudioService_StreamAudio_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/audio.proto",
}
